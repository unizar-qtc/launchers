#!/bin/bash

# File: G09_launcher
# Description : Gaussian 09 job launcher
# Version : 1.2
# Last update : 09-12-2021

#######################################################################
##                           G09_launcher                            ##
#######################################################################
# Launcher for multiple jobs at a time and set computational variables
#
# USAGE:               G09_launcher [-c #cores] [-m #memory] [-q queue]
#                                          [-chk] [--dry] [-h | --help]
#                                         <file1.com> <file2.com> <...>
#
# all the '-*' arguments must preceed the input files
# arguments overrides 'link 0' speficied in file, otherwise not modified
# [*] options are optional, <*> files are mandatory
#

##  DEFAULT VARIABLES  ################################################

  __version__='1.2'

  nodes_def=1                       # number of nodes (only of SLURM)
  cores_def=8                       # number of cores / parallel enviroment
  memory_def='4000MB'               # RAM memory (100MW = 800MB)

  queue_sge='BIFIZCAM'              # name of queue to submit
  queue_slurm='bifi'                # name of queue to submit

  origin=$PWD                       # path of the input files
  destination=$PWD                  # path to store the outputs
  msgf=$HOME/msg                    # path for output/error messages
  jobf=$HOME/jobs                   # path to store '.job'
  chkf=$HOME/chk                    # path to store '.chk'
  dry_flg=false                     # dry run: create .job file but do not launch [true, false]
  chk_flg=false                     # keep '.chk' in place [true, false]
  allowed_exten=( 'com' 'gjf' )     # allowed file extensions
  executable='g09'                  # executable command
  modules=( 'gaussian/g09_D01' )

#######################################################################

## Checks if no arguments are in the input
if [ "$1" == "" ]; then
  echo "ERROR: No input arguments. Use -h for help."
  exit
fi

## Checks existence of folders or create them
if [[ ! -d $msgf ]]; then mkdir $msgf; fi
if [[ ! -d $jobf ]]; then mkdir $jobf; fi
if [[ ! -d $chkf ]]; then mkdir $chkf; fi

## Checks for optional arguments
while [ ${1:0:1} == "-" ]; do     # until arguments does not start with '-'
  arg="$1"
  shift
  case $arg in
    -h|--help)          # print help and exit
      echo "---------------  G09_launcher  ---------------"
      echo "             GAUSSIAN 09 LAUNCHER"
      echo
      echo "Version: $__version__"
      echo
      echo "USAGE:   G09_launcher [options] <file.com> ..."
      echo
      echo "OPTIONS:"
      echo " --nodes  <#nodes>                 number of nodes (def: $nodes_def)"
      echo " -c | --cores  <#cores>            number of cores (def: $cores_def)"
      echo " -m | --memory  <memory>           amount of RAM memory (def: $memory_def)"
      echo " -q | --queue  <queue>             queue name (SGE: $queue_sge / SLURM: $queue_slurm)"
      echo " -chk                              keep .chk file in current directory (def: $chk_flg)"
      echo " --dry                             dry run: create .job but do not launch"
      echo " -h | --help                       print this help and exit"
      echo
      echo "INPUT:"
      echo " <file.com> ...                    gaussian input file"
      echo "                                   must be the last argument, can me multiple"
      exit ;;
    --nodes)
      nodes=$1
      shift
      ;;
    -c|--cores)
      cores_in=$1
      cores_flg=true
      shift
      ;;
    -m|--memory)
      memory_in=$1
      memory_flg=true
      shift
      ;;
    -q|--queue)
      queue_sge=$1
      queue_slurm=$1
      shift
      ;;
    -chk)               # force '.chk' in place and create '.fchk'
      chk_flg=true
      chkf=$PWD
      ;;
    --dry)              # dry run
      dry_flg=true
      ;;
    *)                  # error option
      echo "ERROR: Wrong option '$arg'"
      exit ;;
  esac
done

## default values if not specified in input
nodes=${nodes:=$nodes_def}
cores_in=${cores_in:=$cores_def}
memory_in=${memory_in:=$memory_def}

## go through every input file found in the arguments
for file in "$@"; do

  name=${file%.*}       # name of input file without extension
  exten=${file##*.}     # extension of input file

  # initializate values
  cores=$cores_in
  memory=$memory_in
  chk="${chkf}/${name}.chk"

  # check file existence, if starts with a digit and extension
  if [ ! -f $file ]; then
    echo "ERROR: '$file' not found"
    continue
  elif [[ ${name} =~ ^[0-9] ]]; then
    echo "ERROR: '${file}' name can not start with a digit"
    continue
  elif [[ ! ${allowed_exten[*]} =~ $(echo "\<${exten}\>") ]]; then
	  echo "ERROR: '$file' is not a valid input file (wrong extension)"
    continue
  fi

  # convert to UNIX format (prevent line-ending errors)
  { dos2unix -q -k $file ; } 2>/dev/null

  # add last line (prevent Gaussian IO error)
  echo "" >> $file

  ## computational parameters
  # check for '--Link1--' (if it exist, skip and keep file intact)
  if [ "`awk '/^--Link1--/ {print}' $file`" == "" ]; then
    # read parameters beginning with % to an array
    parameters=($(awk '/^%/ {print}' $file))
    # check content of each parameter
    for param in "${parameters[@]}"; do
      param_name="${param%=*}"
      case ${param_name,,} in
        '%nprocshared'|'%nproc')       # cores parameter
          if [ "$cores_flg" != 'true' ]; then cores=${param##*=}; fi   # read from file
          ;;
        '%mem')                        # memory parameter
          if [ "$memory_flg" != 'true' ]; then memory=${param##*=}; fi
          ;;
        '%chk')                        # chk parameter
          if [ "$chk_flg" != 'true' ]; then chk=${param##*=}; fi
          ;;
        *)                             # next parameter if not recognized
          continue
          ;;
      esac
      sed -i "/$param_name/d" $file  # delete parameter from file
    done

    # write options
    sed -i "1 i %Mem=$memory" $file
    sed -i "1 i %NProcShared=$cores" $file
    sed -i "1 i %Chk=$chk" $file
  fi

  ## write .job file
  jobname="${name}.job"
  echo "#!/bin/bash"                          >  ${jobname}
  echo ""                                     >> ${jobname} ## SGE ######################
  echo "#$ -N ${name}"                        >> ${jobname} # Job name
  echo "#$ -e $msgf/${name}.msg"              >> ${jobname} # Error mesages path
  echo "#$ -o $msgf/${name}.msg"              >> ${jobname} # Output mesages path
  echo "#$ -q $queue_sge"                     >> ${jobname} # Queue name
  echo "#$ -R yes"                            >> ${jobname} # Reservation enabled
  if [ "$cores" != '1' ]; then
    echo "#$ -pe mp$cores $cores"             >> ${jobname} # Parallel environment (cores)
  fi
  echo ""                                     >> ${jobname} ## SLURM ####################
  echo "#SBATCH -J ${name}"                   >> ${jobname} # Job name
  echo "#SBATCH -e $msgf/${name}.msg"         >> ${jobname} # Error mesages path
  echo "#SBATCH -o $msgf/${name}.msg"         >> ${jobname} # Output mesages path
  echo "#SBATCH -p ${queue_slurm}"            >> ${jobname} # Queue name
  echo "#SBATCH -N ${nodes}"                  >> ${jobname} # nodes
  echo "#SBATCH --ntasks-per-node=${cores}"   >> ${jobname} # cores
  echo "#SBATCH --mem=${memory}"              >> ${jobname} # memory
  echo ""                                     >> ${jobname}

  # modules
  for mod in ${modules[@]}; do
    echo "module load $mod"                   >> ${jobname}
  done
  echo ""                                     >> ${jobname}

  # main execution
  echo "${executable} < ${origin}/$file > ${destination}/${name}.log" >> ${jobname}

  if [ "$chk_flg" == "true" ]; then
    echo "formchk ${chk} ${chk%.*}.fchk" >> ${jobname}
  fi

  ## launch
  if [ "$dry_flg" == "true" ]; then
    echo "Job file '${jobname}' succesfully created!"
  else
    { qsub ${origin}/${jobname} ; } 2>/dev/null
    { sbatch ${origin}/${jobname} ; } 2>/dev/null
    mv ${origin}/${jobname} $jobf  # move .job file to proper folder
  fi
done
