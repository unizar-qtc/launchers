#!/bin/bash

# File: G16_launcher
# Description : Gaussian 16 job launcher
# Version : 1.6
# Last update : 30-09-2024

#######################################################################
##                           G16_launcher                            ##
#######################################################################
# Launcher for multiple jobs at a time and set computational variables
#
# USAGE:           G16_launcher [--nodes #nodes] [--nodelist node_name]
#           [-c #cores] [-m #memory] [-g #gpus] [-q queue] [-a account]
#                                  [--ign-chk] [--fchk] [--g09] [--nbo]
#                                                 [--dry] [-h | --help]
#                                         <file1.com> <file2.com> <...>
#
# all the '-*' arguments must preceed the input files
# arguments overrides 'link 0' speficied in file, otherwise not modified
# [*] options are optional, <*> files are mandatory
#

##  DEFAULT VARIABLES  ################################################

  __version__='1.6'

  nodes_def=1                       # min number of nodes
  cores_def=8                       # number of cores / parallel enviroment
  memory_def='16GB'                 # RAM memory (100MW = 800MB)
  gpu_def=0                         # number of GPU cards

  queue_def='thin'                  # name of queue to submit
  account_def='molcat'              # name of account

  msgf=$HOME/msg                    # path for output/error messages
  jobf=$HOME/jobs                   # path to store '.job'
  dry_flg=false                     # dry run: create .job file but do not launch [true, false]
  fchk_flg=false                    # generate a .fchk at the end
  ign_chk_flg=false                 # ignore '.chk' path in input files [true, false]

  allowed_exten=( 'com' 'gjf' )     # allowed file extensions
  executable='g16'                  # executable command
  unload_modules=( 'gaussian' )
  load_modules=( 'gaussian/g16' )

  executable_g09='g09'
  load_modules_g09=( 'gaussian/g09')

  nbo_modules=( 'nbo/7' )

#######################################################################

## Checks if no arguments are in the input
if [ "$1" == "" ]; then
  echo "ERROR: No input arguments. Use -h for help."
  exit
fi

## Checks existence of folders or create them
if [[ ! -d $msgf ]]; then mkdir $msgf; fi
if [[ ! -d $jobf ]]; then mkdir $jobf; fi

## Checks for optional arguments
while [ ${1:0:1} == "-" ]; do     # until arguments does not start with '-'
  arg="$1"
  shift
  case $arg in
    -h|--help)          # print help and exit
      echo "---------------  G16_launcher  ---------------"
      echo "             GAUSSIAN 16 LAUNCHER"
      echo
      echo "Version: $__version__"
      echo
      echo "USAGE:   G16_launcher [options] <file.com> ..."
      echo
      echo "OPTIONS:"
      echo " --nodes  <#nodes>                 number of nodes (def: $nodes_def)"
      echo " --nodelist  <node_name>           name of specific nodes, can be a comma separated list (def: all)"
      echo " -c | --cores  <#cores>            number of cores (def: $cores_def)"
      echo " -m | --memory  <memory>           amount of RAM memory (def: $memory_def)"
      echo " -g | --gpu  <#gpu>                number of GPUs (def: $gpu_def)"
      echo " -q | --queue  <queue>             queue name (def: $queue_def)"
      echo " -a | --account <account>          account name (def: $account_def)"
      echo " --ign-chk                         ignore existing .chk path in input file"
      echo " --fchk                            generate a .fchk after the job is finished"
      echo " --g09                             use Gaussian 09 instead of Gaussian 16"
      echo " --nbo                             load Natural Bond Orbital module (NBO 7)"
      echo " --dry                             dry run: create .job but do not launch"
      echo " -h | --help                       print this help and exit"
      echo
      echo "INPUT:"
      echo " <file.com> ...                    gaussian input file (.com / .gjf)"
      echo "                                   must be the last argument, can me multiple"
      exit ;;
    --nodes)
      nodes=$1
      shift
      ;;
    --nodelist)
      nodelist="#SBATCH --nodelist=$1"
      shift
      ;;
    -c|--cores)
      cores_in=$1
      cores_flg=true
      shift
      ;;
    -m|--memory)
      memory_in=$1
      memory_flg=true
      shift
      ;;
    -g|--gpus)
      gpus=$1
      shift
      ;;
    -q|--queue)
      queue=$1
      shift
      ;;
    -a|--account)
      account=$1
      shift
      ;;
    --ign-chk)          # ignore '.chk' path in input files
      ign_chk_flg=true
      ;;
    --fchk)             # create '.fchk'
      fchk_flg=true
      ;;
    --g09)              # use Gaussian 09
      g09_flg=true
      executable=$executable_g09
      load_modules=(${load_modules_g09[@]})
      ;;
    --nbo)              # load NBO module
      nbo_flg=true
      ;;
    --dry)              # dry run
      dry_flg=true
      ;;
    *)                  # error option
      echo "ERROR: Wrong option '$arg'"
      exit ;;
  esac
done

## default values if not specified in input
nodes=${nodes:=$nodes_def}
cores_in=${cores_in:=$cores_def}
memory_in=${memory_in:=$memory_def}
gpus=${gpus:=$gpus_def}
queue=${queue:=$queue_def}
account=${account:=$account_def}

## load NBO module if specified
if [ "$nbo_flg" == "true" ]; then
  load_modules=(${load_modules[@]} ${nbo_modules[@]})
fi

## go through every input file found in the arguments
for file in "$@"; do

  name=${file%.*}       # name of input file without extension
  exten=${file##*.}     # extension of input file

  # initializate values
  cores=$cores_in
  memory=$memory_in
  chk="${name}.chk"

  # check file existence, if starts with a digit and extension
  if [ ! -f $file ]; then
    echo "ERROR: '$file' not found"
    continue
  elif [[ ${name} =~ ^[0-9] ]]; then
    echo "ERROR: '${file}' name can not start with a digit"
    continue
  elif [[ ! ${allowed_exten[*]} =~ $(echo "\<${exten}\>") ]]; then
	  echo "ERROR: '$file' is not a valid input file (wrong extension)"
    continue
  fi

  # convert to UNIX format (prevent line-ending errors)
  { dos2unix -q -k $file ; } 2>/dev/null

  # add last line (prevent Gaussian IO error)
  echo "" >> $file

  ## computational parameters (Link0)
  # read parameters beginning with % to an array
  parameters=($(awk '/^%/ {print}' $file))
  # check content of each parameter from last to first
  for (( i=${#parameters[@]}-1 ; i>=0 ; i-- )); do
    param="${parameters[$i]}"
    param_name="${param%=*}"
    case ${param_name,,} in
      '%nprocshared'|'%nproc')       # cores parameter
        if [ "$cores_flg" != 'true' ]; then cores=${param##*=}; fi   # read from file
        ;;
      '%mem')                        # memory parameter
        if [ "$memory_flg" != 'true' ]; then memory=${param##*=}; fi
        ;;
      '%chk')                        # chk parameter
        if [ "$ign_chk_flg" != 'true' ]; then chk=${param##*=}; fi
        ;;
      *)                             # next parameter if not recognized
        continue
        ;;
    esac
    sed -i "/$param_name/d" $file  # delete parameter from file
  done
  # write new Link0 parameters
  link0="%Chk=$chk\n\%Mem=$memory\n%NProcShared=$cores"
  sed -i "1 i $link0" $file            # insert at the beginning of file
  sed -i "/^--Link1--/a $link0" $file  # insert after every Link1

  ## write .job file
  jobname="${name}.job"
  printf "#!/bin/bash\n\n" > ${jobname}
  {
    # SLURM -----------------------------------------------------------
    echo "#SBATCH -J ${name}"                    # Job name
    echo "#SBATCH -e $msgf/${name}.msg"          # Error mesages path
    echo "#SBATCH -o $msgf/${name}.msg"          # Output mesages path
    echo "#SBATCH -p ${queue}"                   # Queue name
    echo "#SBATCH -A ${account}"                 # Account name
    echo "#SBATCH -N ${nodes}"                   # Nodes
    echo "#SBATCH --ntasks-per-node=${cores}"    # Cores
    echo "#SBATCH --mem=${memory}"               # Memory
    echo "#SBATCH --gpus=${gpus}"                # GPUs
    echo "${nodelist}"                           # List of nodes
    echo ""

    # modules
    for mod in ${unload_modules[@]}; do
      echo "module unload $mod"
    done
    for mod in ${load_modules[@]}; do
      echo "module load $mod"
    done
    echo ""

    # main execution
    echo "${executable} < $file > ${name}.log"

    if [ "$fchk_flg" == "true" ]; then
      echo "formchk ${chk} ${chk%.*}.fchk"
    fi
  } >> ${jobname}

  ## launch
  if [ "$dry_flg" == "true" ]; then
    echo "Job file '${jobname}' succesfully created!"
  else
    sbatch ${jobname}
    mv ${jobname} $jobf  # move .job file to proper folder
  fi
done
