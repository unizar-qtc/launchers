#!/bin/bash

# File: GMX_launcher
# Description : GROMACS .tpr launcher
# Version : 1.2
# Last update : 09-04-2021

#######################################################################
##                           GMX_launcher                            ##
#######################################################################
# Launcher for GROMACS jobs from '.tpr' files
#
# USAGE:    GMX_launcher [-c #cores] [-m #memory] [-g #gpus] [-q queue]
#                                           [-n #n] [-r #r] [-cpi .cpt]
#                                                    [-j] [-h | --help]
#                                         <file1.tpr> <file2.tpr> <...>
#
# all the '-*' arguments must preceed the input files
# [*] options are optional, <*> files are mandatory
#

##  DEFAULT VARIABLES  ################################################

  __version__='1.2'

  nodes_def=1                       # number of nodes (only of SLURM)
  cores_def=8                       # number of cores / parallel enviroment
  memory_def='16GB'                 # RAM memory (100MW = 800MB)
  gpus_def=2                        # number of GPU cards

  queue_sge='BIFIZCAM'              # name of queue to submit
  queue_slurm='gpu'                 # name of queue to submit

  origin=$PWD                       # path of the input files
  destination=$PWD                  # path to store the outputs
  msgf=$HOME/msg                    # path for output/error messages
  jobf=$HOME/jobs                   # path to store '.job'
  job_flg=false                     # create .job file but do not launch [true, false]
  allowed_exten=( 'tpr' )           # allowed file extensions
  executable='gmx_mpi'              # executable command
  modules=( 'shared' 'cuda90/toolkit/9.0.176' 'gromacs/2018.4' )

#######################################################################

## Checks if no arguments are in the input
if [ "$1" == "" ]; then
  echo "ERROR: No input arguments. Use -h for help."
  exit
fi

## Checks existence of folders or create them
if [[ ! -d $msgf ]]; then mkdir $msgf; fi
if [[ ! -d $jobf ]]; then mkdir $jobf; fi

## Checks for optional arguments
while [ ${1:0:1} == "-" ]; do     # until arguments does not start with '-'
  arg="$1"
  shift
  case $arg in
    -h|--help)          # print help and exit
      echo "---------------  GMX_launcher  ---------------"
      echo "               GROMACS LAUNCHER"
      echo
      echo "Version: $__version__"
      echo
      echo "USAGE:   GMX_launcher [options] <file.tpr> ..."
      echo
      echo "OPTIONS:"
      echo " --nodes  <#nodes>                 number of nodes (def: $nodes_def)"
      echo " -c | --cores  <#cores>            number of cores (def: $cores_def)"
      echo " -m | --memory  <memory>           amount of RAM memory (def: $memory_def)"
      echo " -g | --gpus  <#gpus>              number of GPUs (def: $gpus_def)"
      echo " -q | --queue  <queue>             queue name (SGE: $queue_sge / SLURM: $queue_slurm)"
      echo " -cpi  <file.cpt>                  use checkpoint file to continue"
      echo " -j                                create .job but do not launch"
      echo " -h | --help                       print this help and exit"
      echo
      echo "NAMING OPTIONS:"
      echo " -r  <#>                           replica number (naming: 'file_r#' / 'file_r#_#')"
      echo " -n  <#>                           run number (naming: 'file_#' / 'file_r#_#')"
      echo
      echo "INPUT:"
      echo " <file.tpr> ...                    GROMACS input file"
      echo "                                   must be the last argument, can be multiple"
      exit ;;
    -r)
      runr="_r$1"
      shift
      ;;
    -n)
      runn="_$1"
      shift
      ;;
    --nodes)
      nodes=$1
      shift
      ;;
    -c|--cores)
      cores=$1
      shift
      ;;
    -m|--memory)
      memory=$1
      shift
      ;;
    -g|--gpus)
      gpus=$1
      shift
      ;;
    -q|--queue)
      queue_sge=$1
      queue_slurm=$1
      shift
      ;;
    -cpi)               # use checkpoint file
      cpt=$1
      check_command="-cpi $cpt -noappend"
      shift
      ;;
    -j)                 # create .job file but do not submit
      job_flg=true
      ;;
    *)                  # error option
      echo "ERROR: Wrong option '$arg'"
      exit ;;
  esac
done

## default values if not specified in input
nodes=${nodes:=$nodes_def}
cores=${cores:=$cores_def}
memory=${memory:=$memory_def}
gpus=${gpus:=$gpus_def}

## go through every input file found in the arguments
for file in "$@"; do

  name=${file%.*}              # name of input file without extension
  namef=${name}${runr}${runn}  # formatted name for output
  exten=${file##*.}            # extension of input file

  # check file existence, if starts with a digit and extension
  if [ ! -f $file ]; then
    echo "ERROR: '$file' not found"
    continue
  elif [[ ${name} =~ ^[0-9] ]]; then
    echo "ERROR: '${file}' name can not start with a digit"
    continue
  elif [[ ! ${allowed_exten[*]} =~ $(echo "\<${exten}\>") ]]; then
	  echo "ERROR: '$file' is not a valid input file (wrong extension)"
    continue
  fi

  ## write .job file
  jobname="${namef}.job"
  echo "#!/bin/bash"                          >  ${jobname}
  echo ""                                     >> ${jobname} ## SGE ######################
  echo "#$ -N ${name}"                        >> ${jobname} # Job name
  echo "#$ -e $msgf/${name}.msg"              >> ${jobname} # Error mesages path
  echo "#$ -o $msgf/${name}.msg"              >> ${jobname} # Output mesages path
  echo "#$ -q $queue_sge"                     >> ${jobname} # Queue name
  echo "#$ -R yes"                            >> ${jobname} # Reservation enabled
  if [ "$cores" != '1' ]; then
    echo "#$ -pe mp$cores $cores"             >> ${jobname} # Parallel environment (cores)
  fi
  echo ""                                     >> ${jobname} ## SLURM ####################
  echo "#SBATCH -J ${name}"                   >> ${jobname} # Job name
  echo "#SBATCH -e $msgf/${name}.msg"         >> ${jobname} # Error mesages path
  echo "#SBATCH -o $msgf/${name}.msg"         >> ${jobname} # Output mesages path
  echo "#SBATCH -p ${queue_slurm}"            >> ${jobname} # Queue name
  echo "#SBATCH -N ${nodes}"                  >> ${jobname} # nodes
  echo "#SBATCH --ntasks-per-node=${cores}"   >> ${jobname} # cores
  echo "#SBATCH --mem=${memory}"              >> ${jobname} # memory
  if [ "$queue_slurm" == 'gpu' ]; then
    echo "#SBATCH --gres=gpu:${gpus}"         >> ${jobname} # GPUs
  fi
  echo ""                                     >> ${jobname}

  # modules
  for mod in ${modules[@]}; do
    echo "module load $mod"                   >> ${jobname}
  done
  echo ""                                     >> ${jobname}

  echo "cd $origin"                           >> ${jobname}
  echo ""                                     >> ${jobname}

  # main execution
  echo "mpirun -np $(($nodes * $cores)) $executable mdrun -s $file -deffnm ${namef} ${check_command}"  >> ${jobname}

  # remove 'part*' nomenclature
  if [ ! -z "$check_command" ]; then
    echo "" >> ${jobname}
    echo "for i in ${namef}.part*; do j=\${i%.*}; mv \$i \${j%.*}.\${i##*.}; done" >> ${jobname}
  fi

  ## launch
  if [ "$job_flg" == "true" ]; then
    echo "Job file '${jobname}' succesfully created!"
  else
    { qsub ${origin}/${jobname} ; } 2>/dev/null
    { sbatch ${origin}/${jobname} ; } 2>/dev/null
    mv ${origin}/${jobname} $jobf  # move .job file to proper folder
  fi
done
