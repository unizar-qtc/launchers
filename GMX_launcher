#!/bin/bash

# File: GMX_launcher
# Description : GROMACS .tpr launcher
# Version : 1.9
# Last update : 24-09-2024

#######################################################################
##                           GMX_launcher                            ##
#######################################################################
# Launcher for GROMACS jobs from '.tpr' files
#
# USAGE:           GMX_launcher [--nodes #nodes] [--nodelist node_name]
#                                   [-c #cores] [-m #memory] [-g #gpus]
#                                               [-q queue] [-a account]
#                             [-n #n] [-r #r] [-cpi .cpt] [-extend #ps]
#                                                 [--dry] [-h | --help]
#                                         <file1.tpr> <file2.tpr> <...>
#
# all the '-*' arguments must preceed the input files
# [*] options are optional, <*> files are mandatory
#

##  DEFAULT VARIABLES  ################################################

  __version__='1.9'

  nodes_def=1                       # number of nodes (only of SLURM)
  cores_def=8                       # number of cores / parallel enviroment
  memory_def='16GB'                 # RAM memory (100MW = 800MB)
  gpus_def=0                        # number of GPU cards

  queue_def='thin'                  # name of queue to submit
  account_def='molcat'              # name of account

  msgf=$HOME/msg                    # path for output/error messages
  jobf=$HOME/jobs                   # path to store '.job'
  dry_flg=false                     # dry run: create .job file but do not launch [true, false]
  allowed_exten=( 'tpr' )           # allowed file extensions
  executable='gmx'                  # executable command
  unload_modules=( 'gromacs')
  load_modules=( 'gromacs/2023.1' )

#######################################################################

## Checks if no arguments are in the input
if [ "$1" == "" ]; then
  echo "ERROR: No input arguments. Use -h for help."
  exit
fi

## Checks existence of folders or create them
if [[ ! -d $msgf ]]; then mkdir $msgf; fi
if [[ ! -d $jobf ]]; then mkdir $jobf; fi

## Checks for optional arguments
while [ ${1:0:1} == "-" ]; do     # until arguments does not start with '-'
  arg="$1"
  shift
  case $arg in
    -h|--help)          # print help and exit
      echo "---------------  GMX_launcher  ---------------"
      echo "               GROMACS LAUNCHER"
      echo
      echo "Version: $__version__"
      echo
      echo "USAGE:   GMX_launcher [options] <file.tpr> ..."
      echo
      echo "OPTIONS:"
      echo " --nodes  <#nodes>                 min number of nodes (def: $nodes_def)"
      echo " --nodelist  <node_name>           name of specific nodes, can be a comma separated list (def: all)"
      echo " -c | --cores  <#cores>            number of cores (def: $cores_def)"
      echo " -m | --memory  <memory>           amount of RAM memory (def: $memory_def)"
      echo " -g | --gpus  <#gpus>              number of GPUs (def: $gpus_def)"
      echo " -q | --queue  <queue>             queue name (def: $queue_def)"
      echo " -a | --account <account>          account name (def: $account_def)"
      echo " --cpi  <file.cpt>                 use checkpoint file to continue"
      echo " --extend  <#ps>                   extend runtime by this # ps (creates a new .tpr)"
      echo " --dry                             dry run: create .job but do not launch"
      echo " -h | --help                       print this help and exit"
      echo
      echo "NAMING OPTIONS:"
      echo " -r | --replica  <#>               replica number (naming: 'file_r#' / 'file_r#_#')"
      echo " -n  <#>                           run number (naming: 'file_#' / 'file_r#_#')"
      echo
      echo "INPUT:"
      echo " <file.tpr> ...                    GROMACS input file"
      echo "                                   must be the last argument, can be multiple"
      exit ;;
    -r|--replica)
      runr="_r$1"
      shift
      ;;
    -n)
      runn="_$1"
      shift
      ;;
    --nodes)
      nodes=$1
      shift
      ;;
    --nodelist)
      nodelist="#SBATCH --nodelist=$1"
      shift
      ;;
    -c|--cores)
      cores=$1
      shift
      ;;
    -m|--memory)
      memory=$1
      shift
      ;;
    -g|--gpus)
      gpus=$1
      shift
      ;;
    -q|--queue)
      queue=$1
      shift
      ;;
    -a|--account)
      account=$1
      shift
      ;;
    --cpi)              # use checkpoint file
      cpt=$1
      check_command="-cpi $cpt -noappend"
      shift
      ;;
    --extend)           # extend runtime and create new tpr
      extend=$1
      shift
      ;;
    --dry)              # dry run
      dry_flg=true
      ;;
    *)                  # error option
      echo "ERROR: Wrong option '$arg'"
      exit ;;
  esac
done

## default values if not specified in input
nodes=${nodes:=$nodes_def}
cores=${cores:=$cores_def}
memory=${memory:=$memory_def}
gpus=${gpus:=$gpus_def}
queue=${queue:=$queue_def}
account=${account:=$account_def}

## go through every input file found in the arguments
for file in "$@"; do

  name=${file%.*}              # name of input file without extension
  # remove trailing "_#" if extend and n
  if [ -n "${extend}" ] && [ -n "${runn}" ] && [[ ${name} =~ _[0-9]+$ ]]; then
    name=${name%_*}
  fi
  namef=${name}${runr}${runn}  # formatted name for output
  exten=${file##*.}            # extension of input file

  # check file extension, existence and if starts with a digit
  if [[ ! ${allowed_exten[*]} =~ $(echo "\<${exten}\>") ]]; then
    echo "ERROR: '$file' is not a valid input file (wrong extension)"
    continue
  elif [ ! -f $file ]; then
    # warning if extend set, else error
    if [ ! -z "${extend}" ]; then
      echo "WARNING: '$file' not found"
    else
      echo "ERROR: '$file' not found"
      continue
    fi
  elif [[ ${name} =~ ^[0-9] ]]; then
    echo "ERROR: '${file}' name can not start with a digit"
    continue
  fi

  ## write .job file
  jobname="${namef}.job"
  printf "#!/bin/bash\n\n" > ${jobname}
  {
    # SLURM -----------------------------------------------------------
    echo "#SBATCH -J ${namef}"                   # Job name
    echo "#SBATCH -e $msgf/${namef}.msg"         # Error mesages path
    echo "#SBATCH -o $msgf/${namef}.msg"         # Output mesages path
    echo "#SBATCH -p ${queue}"                   # Queue name
    echo "#SBATCH -A ${account}"                 # Account name
    echo "#SBATCH -N ${nodes}"                   # Nodes
    echo "#SBATCH --ntasks-per-node=${cores}"    # Cores
    echo "#SBATCH --mem=${memory}"               # Memory
    echo "#SBATCH --gpus=${gpus}"                # GPUs
    echo "${nodelist}"                           # List of nodes
    echo ""

    # modules
    for mod in ${unload_modules[@]}; do
      echo "module unload $mod"
    done
    for mod in ${load_modules[@]}; do
      echo "module load $mod"
    done
    echo ""

    # create new extended tpr if proper variable set
    if [ ! -z "${extend}" ]; then
      echo "$executable convert-tpr -s $file -o ${namef}.tpr -extend $extend"
      file=${namef}.tpr
    fi

    # main execution
    echo "$executable mdrun -nt $(($nodes * $cores)) -s $file -deffnm ${namef} ${check_command}"

    # remove 'part*' nomenclature
    if [ ! -z "$check_command" ]; then
      echo -e "\nfor i in ${namef}.part*; do j=\${i%.*}; mv \$i \${j%.*}.\${i##*.}; done"
    fi
  } >> ${jobname}

  ## launch
  if [ "$dry_flg" == "true" ]; then
    echo "Job file '${jobname}' succesfully created!"
  else
    sbatch ${jobname}
    mv ${jobname} $jobf  # move .job file to proper folder
  fi
done
