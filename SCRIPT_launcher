#!/bin/bash

# File: SCRIPT_launcher
# Description : generic script launcher
# Version : 1.4
# Last update : 20-02-2024

#######################################################################
##                          SCRIPT_launcher                          ##
#######################################################################
# Launcher for generic scripts on calculation nodes through queues
#
# USAGE:                   SCRIPT_launcher [--nodes #nodes] [-c #cores]
#                       [-m #memory] [-g #gpus] [-q queue] [-a account]
#                                                 [--dry] [-h | --help]
#                                                           <script.sh>
#
# [*] options are optional, <*> files are mandatory
#

##  DEFAULT VARIABLES  ################################################

  __version__='1.4'

  nodes_def=1                       # min number of nodes
  cores_def=1                       # number of cores / parallel enviroment
  memory_def=''                     # RAM memory (100MW = 800MB)
  gpus_def=0                        # number of GPU cards

  queue_def='thin'                  # name of queue to submit
  account_def='molcat'              # name of account

  dry_flg=false                     # dry run: display command but do not launch [true, false]

#######################################################################

## Checks for optional arguments if any
while [ ${1:0:1} == "-" ]; do     # until arguments does not start with '-'
  arg="$1"
  shift
  case $arg in
    -h|--help)          # print help and exit
      echo "--------------  SCRIPT_launcher  --------------"
      echo "            GENERIC SCRIPT LAUNCHER"
      echo
      echo "Version: $__version__"
      echo
      echo "USAGE:   SCRIPT_launcher [options]"
      echo
      echo "OPTIONS:"
      echo " --nodes  <#nodes>                 min number of nodes (def: $nodes_def)"
      echo " -c | --cores  <#cores>            number of cores (def: $cores_def)"
      echo " -m | --memory  <memory>           amount of RAM memory (def: all available in the node)"
      echo " -g | --gpus  <#gpus>              number of GPUs (def: $gpus_def)"
      echo " -q | --queue  <queue>             queue name (def: $queue)"
      echo " -a | --account <account>          account name (def: $account_def)"
      echo " --dry                             dry run: display command but do not launch"
      echo " -h | --help                       print this help and exit"
      echo
      echo "INPUT:"
      echo " <script.sh> [arg]                 shell script file to be launched"
      echo "                                   must be the last argument, can be followed by arguments"
      echo "                                   if not exists, a file named '<script>.sh' will be created"
      echo "                                   stdout/stderr will be redirected to 'script.out'"
      exit ;;
    --nodes)
      nodes=$1
      shift
      ;;
    -c|--cores)
      cores=$1
      shift
      ;;
    -m|--memory)
      memory="--mem=$1"
      shift
      ;;
    -g|--gpus)
      gpus=$1
      shift
      ;;
    -q|--queue)
      queue_def=$1
      shift
      ;;
    -a|--account)
      account=$1
      shift
      ;;
    --dry)              # dry run
      dry_flg=true
      ;;
    *)                  # error option
      echo "ERROR: Wrong option '$arg'"
      exit ;;
  esac
done

## default values if not specified in input
nodes=${nodes:=$nodes_def}
cores=${cores:=$cores_def}
memory=${memory:=$memory_def}
gpus=${gpus:=$gpus_def}
queue=${queue:=$queue_def}
account=${account:=$account_def}

## read script file from input
file=$1
name=${file%.*}       # name of input file without extension

# check name starts with a digit
if [[ ${name} =~ ^[0-9] ]]; then
  echo "ERROR: '${file}' name can not start with a digit"
  exit 1
fi

## build launch commands
executable="sbatch \
              -J $name \
              -e $PWD/${name}.out \
              -o $PWD/${name}.out \
              -p $queue \
              -A $account \
              -N $nodes \
              -c $cores \
              $memory"
if [ "$queue" == 'gpu' ]; then
  executable=$executable" --gres=gpu:$gpus"
fi

## check script file
if [ ! -f $file ]; then
  echo "WARNING: '$file' file does not exist. Creating '$name.sh'."
  echo "#!/bin/bash" > $name.sh
  echo "$@" >> $name.sh
  chmod +x $name.sh
  executable="$executable $name.sh"
else
  executable="$executable $@"
fi

## launch
if [ "$dry_flg" == "true" ]; then
  echo $executable
else
  $executable
fi
