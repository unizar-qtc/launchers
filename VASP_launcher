#!/bin/bash

# File: VASP_launcher
# Description : VASP job launcher
# Version : 1.3
# Last update : 23-09-2024

#######################################################################
##                           VASP_launcher                           ##
#######################################################################
# Launcher for multiple jobs at a time and set computational variables
#
# USAGE:          VASP_launcher [--nodes #nodes] [--nodelist node_name]
#                                   [-c #cores] [-m #memory] [-g #gpus]
#                                 [-q queue] [-a account] [--name name]
#                                                 [--dry] [-h | --help]
#
# all the '-*' arguments must preceed the input files
# [*] options are optional, <*> files are mandatory
#

##  DEFAULT VARIABLES  ################################################

  __version__='1.3'

  nodes_def=1                       # min number of nodes
  cores_def=8                       # number of cores / parallel enviroment
  memory_def='16GB'                 # RAM memory (100MW = 800MB)
  gpu_def=0                         # number of GPU cards

  queue_def='thin'                  # name of queue to submit
  account_def='molcat'              # name of account

  name_def=${PWD##*/}               # job name (current directory)

  msgf=$HOME/msg                    # path for output/error messages
  jobf=$HOME/jobs                   # path to store '.job'
  dry_flg=false                     # dry run: create .job file but do not launch [true, false]
  required_files=( 'INCAR' )
  executable='vasp_std'
  unload_modules=( 'vasp' )
  load_modules=( 'vasp/6.4.0' )

#######################################################################

## Checks existence of folders or create them
if [[ ! -d $msgf ]]; then mkdir $msgf; fi
if [[ ! -d $jobf ]]; then mkdir $jobf; fi

## Checks for optional arguments
while [ $# -gt 0 ]; do     # until no more arguments
  arg="$1"
  shift
  case $arg in
    -h|--help)          # print help and exit
      echo "---------------  VASP_launcher  ---------------"
      echo "                 VASP LAUNCHER"
      echo
      echo "Version: $__version__"
      echo
      echo "USAGE:   VASP_launcher [options]"
      echo
      echo "OPTIONS:"
      echo " --nodes  <#nodes>                 min number of nodes (def: $nodes_def)"
      echo " --nodelist  <node_name>           name of specific nodes, can be a comma separated list (def: all)"
      echo " -c | --cores  <#cores>            number of cores (def: $cores_def)"
      echo " -m | --memory  <memory>           amount of RAM memory (def: $memory_def)"
      echo " -g | --gpu  <#gpu>                number of GPUs (def: $gpu_def)"
      echo " -q | --queue  <queue>             queue name (def: $queue_def)"
      echo " -a | --account <account>          account name (def: $account_def)"
      echo " --name  <name>                    name of the job (def: directory name)"
      echo " --dry                             dry run: create .job but do not launch"
      echo " -h | --help                       print this help and exit"
      echo
      echo "INPUT:"
      echo " The script must be run in the same directory as where the input files are,"
      echo " including the INCAR file."
      exit ;;
    --nodes)
      nodes=$1
      shift
      ;;
    --nodelist)
      nodelist="#SBATCH --nodelist=$1"
      shift
      ;;
    -c|--cores)
      cores_in=$1
      cores_flg=true
      shift
      ;;
    -m|--memory)
      memory_in=$1
      memory_flg=true
      shift
      ;;
    -g|--gpus)
      gpus=$1
      shift
      ;;
    -q|--queue)
      queue=$1
      shift
      ;;
    -a|--account)
      account=$1
      shift
      ;;
    --name)
      name=$1
      shift
      ;;
    --dry)              # dry run
      dry_flg=true
      ;;
    *)                  # error option
      echo "ERROR: Wrong option '$arg'"
      exit ;;
  esac
done

## default values if not specified in input
nodes=${nodes:=$nodes_def}
cores_in=${cores_in:=$cores_def}
memory_in=${memory_in:=$memory_def}
gpus=${gpus:=$gpus_def}
queue=${queue:=$queue_def}
account=${account:=$account_def}
name=${name:=$name_def}

# check file existence requirements and if name starts with a digit
for file in ${required_files[@]}; do
  if [[ ! -f $file ]]; then
    echo "ERROR: File '${file}' not found"
    exit
  fi
done
if [[ $name =~ ^[0-9] ]]; then
  echo "ERROR: '${name}' name can not start with a digit"
  exit
fi

# initializate values
cores=$cores_in
memory=$memory_in

## computational parameters
#TODO: automatic handling of NBANDS/NCORE/KPAR/IMAGES (www.vasp.at/wiki/index.php/Category:Parallelization)

## write .job file
jobname="${name}.job"
printf "#!/bin/bash\n\n" > ${jobname}
{
  # SLURM -----------------------------------------------------------
  echo "#SBATCH -J ${name}"                    # Job name
  echo "#SBATCH -e $msgf/${name}.msg"          # Error mesages path
  echo "#SBATCH -o $msgf/${name}.msg"          # Output mesages path
  echo "#SBATCH -p ${queue}"                   # Queue name
  echo "#SBATCH -A ${account}"                 # Account name
  echo "#SBATCH -N ${nodes}"                   # Nodes
  echo "#SBATCH --ntasks-per-node=${cores}"    # Cores
  echo "#SBATCH --mem=${memory}"               # Memory
  echo "#SBATCH --gpus=${gpus}"                # GPUs
  echo "${nodelist}"                           # List of nodes
  echo ""

  # modules
  for mod in ${unload_modules[@]}; do
    echo "module unload $mod"
  done
  for mod in ${load_modules[@]}; do
    echo "module load $mod"
  done
  echo ""

  # main execution
  echo "mpirun -np ${cores} ${executable} > ${name}.log"
} >> ${jobname}

## launch
if [ "$dry_flg" == "true" ]; then
  echo "Job file '${jobname}' succesfully created!"
else
  sbatch ${jobname}
  mv ${jobname} $jobf  # move .job file to proper folder
fi
